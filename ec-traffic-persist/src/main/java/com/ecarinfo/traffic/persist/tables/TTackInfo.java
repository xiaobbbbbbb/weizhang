package com.ecarinfo.traffic.persist.tables;
import com.ecarinfo.db4j.table.AllField;
import com.ecarinfo.db4j.table.AbstractTable;
import com.ecarinfo.db4j.table.TableField;
import com.ecarinfo.db4j.table.TableFieldImpl;
import java.util.HashMap;
import java.util.Map;
import java.util.Date;
import com.ecarinfo.db4j.table.DateTableField;
import com.ecarinfo.db4j.table.DateTableFieldImpl;

public class TTackInfo extends AbstractTable {

	static {
		init();
	}

	private TTackInfo(){
		super.tableName = "tack_info";
	}

	private TTackInfo(String aliasName){
		this();
		setAliasName(aliasName);
	}

	public static final TTackInfo getInstance() {
		return new TTackInfo();
	}

	public static final TTackInfo getInstance(String aliasName) {
		return new TTackInfo(aliasName);
	}

	private static Map<String, String> allFieldMap;// = new HashMap<String, String>();
	private static final void init() {
		allFieldMap = new HashMap<String, String>();
		allFieldMap.put("id", "id");
		allFieldMap.put("name", "name");
		allFieldMap.put("operatorId", "operator_id");
		allFieldMap.put("queryType", "query_type");
		allFieldMap.put("cacheTime", "cache_time");
		allFieldMap.put("createTime", "create_time");
		allFieldMap.put("updateTime", "update_time");

	}

	@Override
	public String getFieldName(String javaFieldName) {
		return allFieldMap.get(javaFieldName);
	}

	public final TableField<Integer> all = new AllField<Integer>(this,  "*",null);

	@SuppressWarnings("rawtypes")
	@Override
	public TableField allField() {
		return all;
	}

	/**
	 * | int(11)
	*/
	public final TableField<Integer>  pk = new TableFieldImpl<Integer>(this,"id","id","");
	public final TableField<Integer> id = new TableFieldImpl<Integer>(this,"id","id","");

	/**
	 *策略名称 | char(100)
	*/
	public final TableField<String> name = new TableFieldImpl<String>(this,"name","name","策略名称");

	/**
	 *操作员 | int(11)
	*/
	public final TableField<Integer> operatorId = new TableFieldImpl<Integer>(this,"operator_id","operatorId","操作员");

	/**
	 *查询类型(实时|包年) | int(11)
	*/
	public final TableField<Integer> queryType = new TableFieldImpl<Integer>(this,"query_type","queryType","查询类型(实时|包年)");

	/**
	 *缓存时间（单位：小时） | int(20)
	*/
	public final TableField<Integer> cacheTime = new TableFieldImpl<Integer>(this,"cache_time","cacheTime","缓存时间（单位：小时）");

	/**
	 *创建时间 | datetime
	*/
	public final DateTableField<Date> createTime = new DateTableFieldImpl<Date>(this,"create_time","createTime","创建时间");

	/**
	 *更新时间 | datetime
	*/
	public final DateTableField<Date> updateTime = new DateTableFieldImpl<Date>(this,"update_time","updateTime","更新时间");


	private final TableField<?>[] allFields = new TableField<?>[] {id,name,operatorId,queryType,cacheTime,createTime,updateTime};

	@Override
	public TableField<?>[] getAllFields() {
		return allFields;
	}

	@SuppressWarnings("unchecked")
	@Override
	public TableField<?> getPK() {
		return pk;
	}

	@Override
	public final boolean isAutoGeneratedPK() {
		return true;
	}

	@Override
	public String toString() {
		return "TTackInfo[table=tack_info]";
	}

}
